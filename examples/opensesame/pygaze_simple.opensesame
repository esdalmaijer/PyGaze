# Generated by OpenSesame 2.8.0~pre11 (Gutsy Gibson)
# Tue Dec 17 18:27:50 2013 (posix)
# <http://www.cogsci.nl/opensesame>

set mouse_backend "legacy"
set subject_parity "even"
set height "768"
set font_family "mono"
set font_italic "no"
set synth_backend "legacy"
set title "PyGaze simple example"
set coordinates "relative"
set start "experiment"
set sampler_backend "legacy"
set transparent_variables "no"
set foreground "white"
set font_bold "no"
set description "Default description"
set background "black"
set font_size "18"
set keyboard_backend "legacy"
set canvas_backend "legacy"
set compensation "0"
set bidi "no"
set subject_nr "0"
set width "1024"

define sketchpad sketchpad_done
	set duration "keypress"
	set description "Displays stimuli"
	draw textline 0 0 "Done!" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"
	draw line -192 -192 -160 -224 penwidth=1 color=white show_if="always"

define sketchpad sketchpad_welcome
	set duration "keypress"
	set description "Displays stimuli"
	draw textline 0 0 "PyGaze / OpenSesame demo" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"

define inline_script experiment_script
	___run__
	import random
	
	# Import PyGaze modules
	from pygaze import libscreen, libtime, libinput, defaults
	# Make sure that PyGaze can find the current experiment
	defaults.osexperiment = exp
	
	# We need to explicitly reload the OpenSesame modules, because otherwise PyGaze
	# will try to use the old experiment instance when the experiment is executed
	# twice. Explicitly reloading all OpenSesame-related modules will fix this.
	from pygaze._screen import osscreen
	from pygaze._display import osdisplay
	from pygaze._keyboard import oskeyboard
	from pygaze._mouse import osmouse
	from pygaze._time import ostime
	reload(osscreen)
	reload(osdisplay)
	reload(oskeyboard)
	reload(osmouse)
	reload(ostime)
	
	# create display object
	disp = libscreen.Display(disptype='opensesame')
	# create keyboard object
	kb = libinput.Keyboard(disptype='opensesame', keylist=['left','right'], U+005C
		timeout=2000)
	# create screens
	fixscreen = libscreen.Screen(disptype='opensesame')
	fixscreen.draw_fixation(fixtype='cross',pw=2)
	targetscreens = {}
	targetscreens['left'] = libscreen.Screen(disptype='opensesame')
	targetscreens['left'].draw_circle(pos=(self.get('width')*0.25, U+005C
		self.get('height')/2), fill=True)
	targetscreens['right'] = libscreen.Screen(disptype='opensesame')
	targetscreens['right'].draw_circle(pos=(self.get('width')*0.75, U+005C
		self.get('height')/2), fill=True)
	feedbackscreens = {}
	feedbackscreens[1] = libscreen.Screen(disptype='opensesame')
	feedbackscreens[1].draw_text(text='correct', colour=(0,255,0))
	feedbackscreens[0] = libscreen.Screen(disptype='opensesame')
	feedbackscreens[0].draw_text(text='incorrect', colour=(255,0,0))
	
	# # # # #
	# run the experiment
	
	# run 20 trials
	for trialnr in range(1,21):
		# prepare trial
		trialtype = random.choice(['left','right'])
		
		# present fixation
		disp.fill(screen=fixscreen)
		disp.show()
		libtime.pause(random.randint(750, 1250))
		
		# present target
		disp.fill(targetscreens[trialtype])
		t0 = disp.show()
		
		# wait for input
		response, t1 = kb.get_key()
	
		# process input
		if response == trialtype:
			correct = 1
		else:
			correct = 0
		
		# present feedback
		disp.fill(feedbackscreens[correct])
		disp.show()
		libtime.pause(500)
	__end__
	set _prepare ""
	set description "Executes Python code"

define sequence experiment
	run sketchpad_welcome "always"
	run experiment_script "always"
	run sketchpad_done "always"

